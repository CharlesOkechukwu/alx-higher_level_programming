===============================
How to use 2-matrix_divided.txt
===============================

This function returns a matrix containing the divided numbers of a matrix, the function is:
``matrix_divided(matrix, div)``

div: is the number which would divide all the elements of the matrix 

matrix: is a list of lists which each of its element would be divided by div

Import
===========

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Matrix type validation
======================

Test #0:
	>>> matrix = (1, 2, 3, 4, 5, 6)
	>>> matrix_divided(matrix, 5) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #1:
	>>> matrix = {'a': 1, 'b': 2, 'c': 3}
	>>> matrix_divided(matrix, 4) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #2: matrix with str as main element

	>>> matrix = [[1, 2, 3,4], "Hello World"]
	>>> matrix_divided(matrix, 5) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #3: matrix with boolean as main element

	>>> matrix = [[2,4,6,8], True]
	>>> matrix_divided(matrix, 5) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #4: matrix with none  as main element

	>>> matrix = [[1,2], None]
	>>> matrix_divided(matrix, 5) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #5: matrix with tuple as main element

	>>> matrix = [[1, 2, 4], (1, 2, 3)]
	>>> matrix_divided(matrix, 7) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #6: matrix with dictionary as main element

	>>> matrix = [[1, 2], {'a': 1, 'b': 2}]
	>>> matrix_divided(matrix, 4) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #7: matrix with str as sub element

	>>> matrix = [[1, 3, 4, 5], ['store', 4, 'lemgth', 3]]
	>>> matrix_divided(matrix, 5) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #8: matrix with boolean as sub element

	>>> matrix = [[True, 1, 2, 3, 6], [1, 2, 3, 4, 5]]
	>>> matrix_divided(matrix, 6) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #9: matrix with none as sub element


	>>> matrix = [[1, 3, None], [1, 4, 6]]
	>>> matrix_divided(matrix, 2) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #10: matrix with list as sub element

	>>> matrix = [[1, 2, [1, 1]], [1, 3, 7]]
	>>> matrix_divided(matrix, 4) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #11: matrix with a tuple as a sub element

	>>> matrix = [[1, 2, 3, (1, 2, 1)], [1, 2, 2, 3]]
	>>> matrix_divided(matrix, 6) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #12: matrix with dictionary as sub element

	>>> matrix = [[1, 2, 3, {'a': 2, 'b': 3, 'c': 4}], [2, 4, 4, 5]]
	>>> matrix_divided(matrix, 4) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #13: matrix not same size

	>>> matrix = [[1, 2, 3, 4], [1, 2, 3]]
	>>> matrix_divided(matrix, 4) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

Divider Validation
==================

Test #14: divider is zero

	>>> matrix = [[12, 3, 6], [1, 3, 4]]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

Test #15: divider as str

	>>> matrix = [[1, 2, 3], [1, 4, 6]]
	>>> matrix_divided(matrix, "hello")
	Traceback (most recent call last):
	TypeError: div must be a number

Test #16: divider as boolean

	>>> matrix = [[1, 2, 3], [1, 2, 4]]
	>>> matrix_divided(matrix, True)
	Traceback (most recent call last):
	TypeError: div must be a number

Test #17: div as None

	>>> matrix = [[1, 3, 5], [1, 3, 5]]
	>>> matrix_divided(matrix, None)
	Traceback (most recent call last):
	TypeError: div must be a number

Test #18: div as tuple

	>>> matrix = [[1, 2, 4], [1, 1, 5]]
	>>> matrix_divided(matrix, (1, 2)) 
	Traceback (most recent call last):
	TypeError: div must be a number

Test #19: div as list

	>>> matrix = [[1, 2, 4], [1, 1, 4]]
	>>> matrix_divided(matrix, [1, 2])
	Traceback (most recent call last):
	TypeError: div must be a number

Test #20: div as dictionary

	>>> matrix = [[1, 2, 3], [1, 1, 2]]
	>>> matrix_divided(matrix, {'a': 3, 'b': 1})
	Traceback (most recent call last):
	TypeError: div must be a number

Result validation
==================

Test #21:
	>>> matrix = [[2, 6, 8], [4, 16, 18]]
	>>> matrix_divided(matrix, 2)
	[[1.0, 3.0, 4.0], [2.0, 8.0, 9.0]]


Test #22:

	>>> matrix = [[3, 9, 18]]
	>>> matrix_divided(matrix, 3)
	[[1.0, 3.0, 6.0]]

Test #23:

	>>> matrix = [[2, 4, 6], [5, 9, 10]]
	>>> matrix_divided( matrix, 2.0)
	[[1.0, 2.0, 3.0], [2.5, 4.5, 5.0]]

Test #24:

	>>> matrix = [[2.5, 3.0, 5.5], [1, 0.6, 5.1]]
	>>> matrix_divided(matrix, 3)
	[[0.83, 1.0, 1.83], [0.33, 0.2, 1.7]]

Test #25:

	>>> matrix = []
	>>> matrix_divided(matrix, 2) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats

Test #26: 

	>>> matrix = [[], []]
	>>> matrix_divided(matrix, 2) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix(list of lists) of integers/floats
