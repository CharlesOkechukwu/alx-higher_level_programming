===============================
 How to Use 3-say_my_name.py
===============================

This function prints a string to stdout
``say_my_name(first_name, second_name="")``

Import module
=============

	>>> say_my_name = __import__('3-say_my_name').say_my_name

Validate first_name
===================

Test #0: first_name is an int

	>>> say_my_name(12, "hello")
	Traceback (most recent call last):
	TypeError: first_name must be a string

Test #1: first name is an empty string

	>>> say_my_name("", "john")
	My name is  John

Test #2: first name is space

	>>> say_my_name(" ", "john")
	My name is   John

Test #3: first name is str

	>>> say_my_name("Charles", "chuks")
	My name is Charles Chuks

Test #4: first name is a new line

	>>> say_my_name('\n', "Charles")
	My name is 
	 Charles

Test #5:  first name is small letter

	>>> say_my_name('charles', 'chuks')
	My name is Charles Chuks

Test #6: first name not given

	>>> say_my_name()
	Traceback (most recent call last):
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

Test #7: only first_name given

	>>> say_my_name("charles")
	My name is Charles 

Validate second_name
====================

Test #8: second name as int

	>>> say_my_name("charles", 15)
	Traceback (most recent call last):
	TypeError: last_name must be a string

Test #9: second name as space

	>>> say_my_name("hello", " ")
	My name is Hello  

Test #10: second name as new line

	>>> say_my_name("jack", '\n')
	My name is Jack 
	<BLANKLINE>

Validate both input
===================

Test #11: second and first name empty str

	>>> say_my_name("", "")
	My name is  

Test #12: second and first are newline

	>>> say_my_name('\n', '\n')
	My name is 
	<BLANKLINE>
	<BLANKLINE>

Test #13: both are spaces

	>>> say_my_name(" ", " ")
	My name is    
