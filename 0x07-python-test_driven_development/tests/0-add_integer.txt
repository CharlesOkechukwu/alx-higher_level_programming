===============================
How to use 0-add_integer.txt module
===============================
It returns the sum of two integers with a function called:
``add_integer(a, b)``

``add_integer(a, b)`` functions the same way with using the ``+`` operator.
Integers
=======
All variables to be added must be an ineteger or float
..
..
Import the module
=======
..
..
	>>> add_integer = __import__('0-add_integer').add_integer

Test Cases
===========

``add_integer(a, b)`` raises error if no variable is passed.

Test #1: variable a is of type str
..
..
	>>> add_integer("hello", 5)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test #2: variable b is a string
..
..
	>>> add_integer(10, "hello")
	Traceback (most recent call last):
	TypeError: b must be an integer

Test #3: variable a is a boolean
..
..
	>>> add_integer(True, 15)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test #4: variable b is a boolean
..
..
	>>> add_integer(10, True)
	Traceback (most recent call last):
	TypeError: b must be an integer

Test #5: variable a is none

	>>> add_integer(None, 85)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test #6: variable b is none

	>>> add_integer(35, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

Test #7: var a is a list

	>>> add_integer([1, 2, 3], 25)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test #8: var b is a list

	>>> add_integer(75, [1, 2, 4])
	Traceback (most recent call last):
	TypeError: b must be an integer

Test #9: var a is a dictionary

	>>> add_integer({'a': 12, 'b': 15}, 12)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test #10: var b is a dictionary

	>>> add_integer(15, {'a': 13, 'b': 15})
	Traceback (most recent call last):
	TypeError: b must be an integer

Test #11: var a is a tuple

	>>> add_integer((1, 2,3), 47)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test #12: var b is a tuple

	>>> add_integer(12, (1, 2 ,3 ,4))
	Traceback (most recent call last):
	TypeError: b must be an integer

Results of addition
======================

Test #13: var a is a float

	>>> add_integer(2.5, 5)
	7

Test #14: var a and b is a float

	>>> add_integer(1.2, 2.5)
	3

Test #14: var a is negative

	>>> add_integer(-1, 5)
	4

Test #15: var a is greater negative

	>>> add_integer(-6, 2)
	-4

Test #16: var a and b is negative

	>>> add_integer(-2, -4)
	-6

Test #17: var a and b is positive

	>>> add_integer(2, 15)
	17

Test #18: var as set

	>>> add_integer({2, 3}, 1)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test #19: no variable

	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'

Test #20: float overflow

	>>> add_integer(2e6000, 2)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
