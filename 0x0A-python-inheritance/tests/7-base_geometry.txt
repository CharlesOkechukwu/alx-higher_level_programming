===============================
 How to Use 7-base_geometry.py
==============================

Import Module
=============

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()

Test Cases
==========

Test 2:

	>>> try:
	... 	bg.integer_validator("distance", 4)
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))

Test 3:
	>>> try:
	... 	bg.integer_validator("name", 0)
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[ValueError] name must be greater than 0

Test 4:

	>>> try:
	...	bg.integer_validator("name", -5)
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[ValueError] name must be greater than 0

Test 5:

	>>> try:
	... 	bg.integer_validator("name", True)
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] name must be an integer

Test 6:

	>>> try:
	... 	bg.integer_validator("name", [])
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] name must be an integer

Test 7:

	>>> try:
	... 	bg.integer_validator("name", None)
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] name must be an integer

Test 8:

	>>> try:
	... 	bg.integer_validator("name", 1e500)
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] name must be an integer

Test 9:

	>>> try:
	... 	bg.integer_validator("name", "hello")
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] name must be an integer

Test 10:

	>>> try:
	... 	bg.area()
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[Exception] area() is not implemented

Test 11:

	>>> try:
	... 	bg.integer_validator("name", 1.20)
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] name must be an integer

Task 12:

	>>> try:
	... 	bg.integer_validator("name", object)
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] name must be an integer
